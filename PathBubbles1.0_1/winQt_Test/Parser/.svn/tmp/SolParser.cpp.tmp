

#include "SolParser.h"

#define BUFSIZE 256

SolParser::SolParser(char *fn)
{
  ifstream inf(fn, ios::in);

  char lineBuf[BUFSIZE];


  while(inf.getline(lineBuf, BUFSIZE))
  {
    char token[BUFSIZE], parName[BUFSIZE];
    vector <float>  pv; // current parameter values

    inf.getline(lineBuf, BUFSIZE);
	sscanf(lineBuf, "%s", token);
	if(strcmp(token, "<name>") == 0)
	{
	  // save the name 
	  sscanf(lineBuf, "%s %s", token, parName);
	  _names.push_back(parName);

	  // keep reading until the token is not <val>
	  while(inf.getline(lineBuf, BUFSIZE))
	  {
	    sscanf(lineBuf, "%s", token);
		if(strcmp(token, "<val>")==0)
		{
		  float v;
	      sscanf(lineBuf, "%s %f", token, &v);
		  pv.push_back(v);
		}; 
	  } // 
	}

	_values.push_back(pv);
	pv.clear();
  };

  inf.close();
}

SolParser::~SolParser()
{

}

// void SolParser::Print()
// {
//   int ps = _names.size(); // number of parameters
//   
//   cerr << "NUM_OF_PAR=" << ps << endl;
//   vector<string>::iterator iter_ii, iter_jj;
//   for(iter_ii=_names.begin(); iter_ii!=_names.end(); iter_ii++)
//   {
//      // cerr << _lev[li]; 
// 	 /* li++;*/
//       for(iter_jj=(*iter_ii).begin(); iter_jj!=(*iter_ii).end(); iter_jj++)
//       {
// 		 cerr << *iter_jj << "," ;
//       }
// 	  cerr << endl;
//   }; // end for(iter_ii)
// 
// }

